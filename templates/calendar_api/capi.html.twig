{% extends 'base.html.twig' %}

{% block title %}
	Calendar_test
{% endblock %}

{% block header %}{% endblock %}
{% block sidebar %}{% endblock %}
{% block footer %}{% endblock %}

{% block body %}


	<div
		class="tab-pane active" id="users">
		{#---------------------------------------------Modal-------------------------------------------- #}
		{% embed "components/modal.html.twig" %}
			{% set modalType = "modal-lg" %}
			{% set id = "calendarForm" %}
			{% set buttonTitle = "Ajouter un utilisateur" %}
			{% block modalTitle %}Ajouter un evènement
			{% endblock %}
			{% block dashboard %}
				{% include "calendar/new.html.twig" %}
			{% endblock %}
		{% endembed %}
		{#--------------------------------------------Fin modal------------------------------------------- #}


	
	</div>

	{# --------------------------------------------------Calendar------------------------------------------ #}
	<div class="card-body">
		<div id='calendar2'></div>
	</div>
	{#-------------------------------------------------Fin Calendar-----------------------------------------#}

	{#----------------------------------------------- .Launch Modal info Button--------------------------------------#}

<!-- .modal -->
<div class="modal fade" id="Mysmallmodal">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">
                	Information
                </h4>                                                             
			</div> 
			<div class="modal-body">
				{% for calendar in calendar %}
				{{calendar.title}} {{calendar.teacherName}}
				{% endfor %}
			</div>   
		</div>                                                                       
	</div>                                      
</div>




{#-----------------------------------------------Fin Modal info Button------------------------------------------#}



	{# ---------------------------------------------------DELETE-------------------------------------------- #}
	{# {% for calendar in calendar %}
	<form method="post" action="{{ path('calendar_delete', {'id': calendar.id}) }}" onsubmit="return confirm('Are you sure you want to delete this item?');" style="position:fixed; top:30%; left:50%; background-color:lightGray; z-index:1000; color:black; display:none" id="delete" >
    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ calendar.id) }}">
    <button class="btn btn-danger">Delete</button>
	</form>
	{% endfor %} #}
	{# -------------------------------------------------FIN DELETE-------------------------------------------#}

	{# <div id='popup' style='position:fixed; top:30%; left:50%; background-color:lightGray; z-index:1000; color:black; display: none; '>
	    <form name="teacherName" method='POST' action='' >
	    <label for="Teacher">Choose a Teacher:</label>
	       <select id="monTeacher">
	            {% for calendar in calendrier %}
	            <option>{{calendar.teacherName}}</option>
	            {% endfor %}
	       </select>
	        <button type='submit' name='valider' value='valider'>Valider</button>
	    </form>
	</div> #}


	<script>

		window.onload = () => {


	var calendarEl = document.getElementById('calendar2');
	let urlVerif = document.location.href;
	let urlcompte = urlVerif.length;
	let searchParams = new URLSearchParams(window.location.search);
	let UrlParamStart = searchParams.get('start');
	let UrlParamEnd = searchParams.get('end');
	var cookieStart = "";
	var cookieEnd =""; 
	var calendar = new FullCalendar.Calendar(calendarEl, {
	headerToolbar: {
	left: 'prev,next today',
	center: 'title',
	right: 'dayGridMonth,timeGridWeek,timeGridDay'
	},
	timeZone: 'UTC',
	defaultView: 'month',
	navLinks: true, // can click day/week names to navigate views
	businessHours: true, // display business hours
	editable: true,
	selectable: true,
	selectMirror: true,
	droppable: true, // this allows things to be dropped onto the calendar
	select: function (arg) {


		let urlVerif = document.location.href;
		let urlcompte = urlVerif.length;
		var startS = JSON.stringify(arg.start);
		var endS = JSON.stringify(arg.end);
		var dtExpire = new Date();
		let donnees = {
			'start' : startS,
			'end' : endS
			}

		function convertFromStringToDate(responseDate){
			let dateComponents = responseDate.split('T');
			let datePieces = dateComponents[0].split("-");
			let timePieces = dateComponents[1].split(":");
			return(new Date(datePieces[2], (datePieces[1] - 1), datePieces[0],
								timePieces[0], timePieces[1], timePieces[2]))
		}


		let date = startS.toString();


		let datee = new Date(date);


		if (navigator.cookieEnabled) {
			if ((document.cookie.indexOf("start") == -1)||(document.cookie.indexOf("end") == -1)) {
			dtExpire.setTime(dtExpire.getTime() + 3600 * 1000);
			document.cookie = "start= "+arg.start+"; expires=" + new Date(dtExpire).toUTCString() + "; path=/";
			document.cookie = "end= "+arg.end+"; expires=" + new Date(dtExpire).toUTCString() + "; path=/";
			document.cookie = "all= "+arg.allDay+"; expires=" + new Date(dtExpire).toUTCString() + "; path=/";
			
			}
		}

		
		function deleteAllCookies() {
             var cookies = document.cookie.split(";");
             for (var i = 0; i < cookies.length; i++) {
                 var cookie = cookies[i];
                 var eqPos = cookie.indexOf("=");
                 var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                 document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
             }
	}


	
	function initialisation(){

		
		let maClosure = () => {
		
		let urlmodif = window.history.pushState('api', 'New Page Title', "/api?start=" + donnees['start'] + "&end=" + donnees['end']);



							$('#calendarForm').modal('show');


			}

    	return maClosure;
	}



	let lancement = initialisation()


	lancement();




						$("#actualiserListe").click(function(){


							if (confirm('souhaitez-vous mettre à jour la liste des formateurs disponible sur la période selectionnée ?')) {


									var xhr = new XMLHttpRequest;
	
											xhr.onreadystatechange = function() {
												if (xhr.readyState == 4 && (xhr.status == 200 || xhr.status == 0)) {
													callback(xhr.responseText);
												}
											};

											xhr.open("GET", "/api?start=" + donnees['start'] + "&end=" + donnees['end'], true);
											xhr.send(JSON.stringify(donnees));



											location.assign(location.href);

											
							}

						})


	$(document).ready(function(){

		
	

    




		$("#envoyerFormulaire").click(function(){



					var title = $("#title").val();
					var description = $("#description").val();
					var teacherName = $("#teacher").val();
					var cat = $("#category").val();

					/*function info(){

										alert('Vous avez deja selectionnées des dates');
										alert('précedente selectionnée debut: ' + JSON.stringify(cookieStart));
										alert('précedente selectionnée fin: ' + JSON.stringify(cookieEnd));
										alert('Veuillez saisir les bonnes dates');

										}*/

			
									if(title !="" && description !=""){


										calendar.addEvent({

										title: title,
										start: arg.start,
										end: arg.end,
										allDay: arg.allDay,
										teacherName: teacherName,
										description: description,
										catego: cat,

										})

									deleteAllCookies();

									calendar.unselect();

									let urlmodif = window.history.pushState('api', 'New Page Title', "/api");

									
									setTimeout(location.assign(location.href),4000);


									}
									

								//}else{

									

										/*if(arg.start == cookieStart || arg.end == cookieEnd){

											calendar.addEvent({

												title: title,
												start: arg.start,
												end: arg.end,
												allDay: arg.allDay,
												teacherName: teacherName,
												description: description,
												catego: cat,

										})

												deleteAllCookies();
												location.assign(location.href);

										}else{


											return info();*/


										//}



								//}

		
							//deleteAllCookies();							

			
							

							//location.assign(location.href);

			
					})

		
		})

		calendar.unselect();







},



				eventClick: function (arg) {
				if (confirm('Are you sure you want to delete this event?')) {


					arg.event.remove()
				}

				
				},
				eventOverlap: function(stillEvent, movingEvent) {
    			return stillEvent.allDay && movingEvent.allDay;
  				},

				/*eventMouseEnter:function( mouseEnterInfo ) {

					$('#Mysmallmodal').modal('show');
				 },*/
				editable: true,
				dayMaxEvents: true, // allow "more" link when too many events
				events: [{% for calendar in calendar %}{
				id: '{{calendar.id}}',
				title:'{{ calendar.title ~ ' ' ~ calendar.teacherName }}',
				start: '{{ calendar.start |date('Y-m-d H:i:s') }}',
				end: '{{ calendar.end |date('Y-m-d H:i:s') }}',
				description: '{{ calendar.description }}',
				backgroundColor: '{{ calendar.backgroundColor }}'

				},{% endfor %}]

			
				})

				


				//$('#calendarFomr').modal('show');

				calendar.on('eventAdd', (e) => {
				let url = '/api/edit'
				let donnees = {
				"title": e.event.title,
				"start": e.event.start,
				"end": e.event.end,
				"description": e.event.extendedProps.description,
				"teacherName": e.event.extendedProps.teacherName,
				"teacherId": " ",
				"categorie": "Html",
				"backgroundColor": '#0080ff'


				}


				let xhr = new XMLHttpRequest

				xhr.open("PUT", url, true)
				xhr.send(JSON.stringify(donnees))


				})

				
				

				calendar.render();

				calendar.on('eventChange', (e) => {
				let url = `/api/${e.event.id}/edit`
				let donnees = {
				"title": e.event.title,
				"start": e.event.start,
				"end": e.event.end,
				"description": e.event.extendedProps.description,
				"backgroundColor": e.event.backgroundColor


				}


				let xhr = new XMLHttpRequest

				xhr.open("PUT", url, true)
				xhr.send(JSON.stringify(donnees))



				})



				calendar.on('eventRemove', (e) => {
				let url = `/api/${e.event.id}/delete`
				let donnees = {
				"id": e.event.id
				}


				let xhr = new XMLHttpRequest

				xhr.open("PUT", url, true)
				xhr.send(JSON.stringify(donnees))


				});

		/*calendar.select( start, (e) => {
		let donnees = {
			"start": e.event.start,
			"end" : e.event.end
		}
		
			$.ajax({
        type: 'POST',
        url: '/test2',
        data: {json: JSON.stringify(donnees)},
        dataType: 'json'            
    })

	});*/

	//setTimeout(changeUrl(urlInit),10000);
	

}
	</script>
{% endblock %}
